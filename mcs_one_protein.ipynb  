{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XjL4umhUd0Ii0Vp8fT4SvngM56gvjRTh","timestamp":1673835343836}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install 'biopandas'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EFvOqsIGVfi-","executionInfo":{"status":"ok","timestamp":1674713173651,"user_tz":-540,"elapsed":7262,"user":{"displayName":"野村竜聖","userId":"15539222515771802696"}},"outputId":"d9ec1c5c-75fb-441c-b459-a519edbc409a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting biopandas\n","  Downloading biopandas-0.4.1-py2.py3-none-any.whl (878 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m879.0/879.0 KB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from biopandas) (57.4.0)\n","Requirement already satisfied: pandas>=0.24.2 in /usr/local/lib/python3.8/dist-packages (from biopandas) (1.3.5)\n","Requirement already satisfied: numpy>=1.16.2 in /usr/local/lib/python3.8/dist-packages (from biopandas) (1.21.6)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.24.2->biopandas) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.24.2->biopandas) (2022.7)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.2->biopandas) (1.15.0)\n","Installing collected packages: biopandas\n","Successfully installed biopandas-0.4.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bENjuiY7Ud1X","executionInfo":{"status":"ok","timestamp":1674713209755,"user_tz":-540,"elapsed":23648,"user":{"displayName":"野村竜聖","userId":"15539222515771802696"}},"outputId":"61a199df-2d78-4a72-88c5-6ee7b0221499"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import argparse\n","import collections\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import subprocess\n","import time\n","from biopandas.pdb import PandasPdb\n","from sklearn.neighbors import KDTree\n","from collections import defaultdict\n","import csv\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["src_path = \"/content/drive/My Drive/research/src/\"\n","data_path = \"/content/drive/My Drive/research/data/\"\n","data1_path = \"/content/drive/My Drive/research/data1/\"\n","result_path = \"/content/drive/My Drive/research/result/\"\n","research_path = \"/content/drive/My Drive/research/\"\n","contact_csv_path = \"/content/drive/My Drive/research/one_csv/\""],"metadata":{"id":"gmE4580cWXxe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#pdb→multi\n","def pdb2multi(keyword):\n","    hit_pdb_path = data_path + keyword + '_result.pdb' \n","    with open(hit_pdb_path, 'r') as input_file:\n","        count = 0\n","        for line in input_file:\n","            if line.startswith('MODEL'):\n","                output_file = open(data1_path + keyword + '/' + str(count) + '.pdb', 'w')\n","                count += 1\n","            elif count == 0:\n","                pass\n","            else:\n","                output_file.write(line)\n","\n","#main\n","def main(keyword):\n","    cmd = ['mkdir', data1_path + keyword]\n","    subprocess.run(cmd)\n","    pdb2multi(keyword)"],"metadata":{"id":"31lI2YFzXwbe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('minus')"],"metadata":{"id":"VRvCdvmUX-91"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('plus')\n","#main('zero')\n","#main('sample1')\n","#main('sample2')\n","#main('sample3')"],"metadata":{"id":"R6xafff25Rjs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('sample21')\n","#main('minus1')"],"metadata":{"id":"-VYN5Bgc6kJ_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('sample31')"],"metadata":{"id":"EI_BciSL1aRW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('minus2')\n","#main('plus1')\n","#main('zero1')"],"metadata":{"id":"siABNayccLsB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('sample11')\n","#main('sample31')"],"metadata":{"id":"6rOEV1ymqD_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('minus4')\n","#main('plus4')\n","#main('zero4')\n","#main('sample14')\n","#main('sample24')\n","#main('sample34')\n","#main('minus5')\n","#main('plus5')\n","#main('zero5')\n","#main('sample15')\n","#main('sample25')\n","#main('sample35')"],"metadata":{"id":"yGIO7ap5Zvex"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('minus6')\n","#main('plus6')\n","#main('zero6')\n","#main('sample16')\n","#main('sample26')\n","#main('sample36')"],"metadata":{"id":"l-q0beXUuT2J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main('minus7')\n","#main('minus8')\n","#main('plus7')"],"metadata":{"id":"lULGOQLxsCHq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["接触判定距離は4.5nm"],"metadata":{"id":"xdSvap-Kbpha"}},{"cell_type":"code","source":["class UnionFind():\n","    def __init__(self, n):\n","        self.n = n\n","        self.parents = [-1] * n\n","\n","    def find(self, x):\n","        if self.parents[x] < 0:\n","            return x\n","        else:\n","            self.parents[x] = self.find(self.parents[x])\n","            return self.parents[x]\n","\n","    def union(self, x, y):\n","        x = self.find(x)\n","        y = self.find(y)\n","\n","        if x == y:\n","            return\n","\n","        if self.parents[x] > self.parents[y]:\n","            x, y = y, x\n","\n","        self.parents[x] += self.parents[y]\n","        self.parents[y] = x\n","    \n","    def all_group_members(self):\n","        group_members = defaultdict(list)\n","        for member in range(self.n):\n","            group_members[self.find(member)].append(member)\n","        return group_members\n","\n","def memo_aggregate_pair(num, sum, step, pdb_structure_data,protein_num):\n","    zahyo = pdb_structure_data.df['ATOM'][['x_coord','y_coord','z_coord']].values\n","    tree = KDTree(zahyo)\n","    pairs = tree.query_radius(zahyo, r=4.5, return_distance=False, sort_results=False)\n","    memo_pair = set()\n","    residue_stock = []\n","    for a, b in enumerate(pairs):\n","        for c in b:\n","            if a // step < c // step:\n","                memo_pair.add(\n","                    (a // step, c  // step)#原子番号を1個のタンパク質あたりの原子数で割り、タンパク質にID(1～１００まで)を付加する\n","                )\n","                if a % step > c % step:#小さい残基番号が左、大きい残基番号が右になるようにする\n","                  t = a\n","                  a = c\n","                  c = t\n","                residue_stock.append(( a % step, c % step))\n","                #各タンパク質の最初の原子から数えたときの原子番号をメモ\n","    uf = UnionFind(protein_num)\n","    for pair in memo_pair:\n","        uf.union(pair[0],pair[1])\n","    #MCS_calc\n","    MCS = 0\n","    for memo_pair in uf.all_group_members().values():\n","        MCS += len(memo_pair)*len(memo_pair)\n","    MCS = MCS/protein_num\n","\n","    return MCS, residue_stock\n","\n","    #メイン関数\n","def main(protein_num, keyword, file_num):\n","    sum_mcs = []\n","    residue = []\n","    for num in range(0,1):#dirの数\n","        #print(num)\n","        access_pdb_dir = data1_path + keyword + '/' #変更あり\n","        pdb_list = [access_pdb_dir + str(n)+'.pdb' for n in range(file_num)]#fileの数\n","        for file_path in pdb_list:\n","            pdb = PandasPdb().read_pdb(file_path)\n","            chain_id = pdb.df['ATOM']['chain_id'].values\n","            residue_sum = len(chain_id)\n","            step = int(residue_sum/protein_num)#1個当たりの原子数\n","            mcs, residue_stock = memo_aggregate_pair(num, residue_sum, step, pdb, protein_num)\n","            sum_mcs.extend([mcs])\n","            residue.extend(residue_stock)\n","    sum_mcs = np.reshape(np.array(sum_mcs), [1, file_num])\n","    ref_pdb = PandasPdb().read_pdb(data_path + keyword + '.pdb')#残基番号を取り出すためのベースのpdbfile\n","    max_residue_number = ref_pdb.df['ATOM']['residue_number'].max()\n","    c = collections.Counter(residue)\n","    with open (contact_csv_path + keyword + '_contact.csv', 'a') as rf:\n","      writer = csv.writer(rf)\n","      writer.writerow([keyword])\n","      memo_list = []\n","      for c_key, c_v in c.items():\n","        if c_key[0] == 0:\n","          if c_key[1] == 0:\n","            c_key1 = max_residue_number\n","          else:\n","            c_key1 = ref_pdb.df['ATOM']['residue_number'][ref_pdb.df['ATOM']['atom_number'] == c_key[1]].values[0]\n","          c_key2 = max_residue_number\n","          memo_list.append([c_key1, c_key2, c_v])\n","          continue\n","        else:\n","          c_key1 = ref_pdb.df['ATOM']['residue_number'][ref_pdb.df['ATOM']['atom_number'] == c_key[0]].values\n","\n","        if c_key[1] == 0:\n","          c_key2= [max_residue_number]\n","        else:\n","          c_key2 = ref_pdb.df['ATOM']['residue_number'][ref_pdb.df['ATOM']['atom_number'] == c_key[1]].values\n","        memo_list.append([c_key1[0], c_key2[0], c_v])\n","      np.savetxt(rf,X=np.array(memo_list),delimiter=',', fmt='%d') \n","    with open(research_path + 'BPTI5_mcs.csv', 'a') as f:\n","        writer = csv.writer(f)\n","        writer.writerow([keyword])\n","        np.savetxt(f,X=sum_mcs,delimiter=',', fmt='%.3e')"],"metadata":{"id":"a-Q0E4-jVewa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["1サンプルにつき1分38秒くらいかかる->1分44秒になった。"],"metadata":{"id":"9hRbkMGpauO8"}},{"cell_type":"code","source":["#main(100, 'minus', 201)"],"metadata":{"id":"hLy3JSH8V9yq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main(100,'plus',201)\n","#main(100,'zero',201)\n","#main(100,'sample1',201)\n","#main(100,'sample2',201)\n","#main(100,'sample3',201)"],"metadata":{"id":"yDRAb6DO6JBj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["500ns一回目の結果はBPTI2_mcs.csvに保存してる"],"metadata":{"id":"ZSJKDO_ZIc7I"}},{"cell_type":"code","source":["#main(100,'minus1', 501)\n","#main(100,'sample11',501)\n","#main(100,'sample21',501)\n","#main(100,'sample31',501)\n","#main(100,'plus1',501)\n","#main(100,'zero1',501)"],"metadata":{"id":"moMwT-bprBtk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["500ns2回目の結果はBPTI3_mcs.csvに保存している。\\\n","直径が4.1だったぽい。平均とって4.5Å"],"metadata":{"id":"s1J7N89BVD0Y"}},{"cell_type":"code","source":["#main(100,'minus1', 501)\n","#main(100,'sample11',501)\n","#main(100,'sample21',501)\n","#main(100,'sample31',501)\n","#main(100,'plus1',501)\n","#main(100,'zero1',501)"],"metadata":{"id":"oEYp7wWJVV36"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#main(100, 'sample21', 500)\n","#main(100,'minus1', 501)"],"metadata":{"id":"RAWvcXn-hJWj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["500ns3回目の結果はBPTI4_mcs.csvに保存している。\n","＊これはT=298Kの系"],"metadata":{"id":"wKJIx6BPbcx7"}},{"cell_type":"code","source":["#main(100, 'minus4', 501)\n","#main(100, 'minus5', 501)\n","#main(100, 'plus4', 501)\n","#main(100, 'plus5', 501)\n","#main(100, 'zero4', 501)\n","#main(100, 'zero5', 501)\n","#main(100, 'sample14', 501)\n","#main(100, 'sample15', 501)\n","#main(100, 'sample24', 501)\n","#main(100, 'sample25', 501)\n","#main(100, 'sample34', 501)\n","#main(100, 'sample35', 501)\n","#main(100,'minus6',501)\n","#main(100,'plus6',501)\n","#main(100,'zero6',501)\n","#main(100,'sample16',501)\n","#main(100,'sample26',501)\n","#main(100,'sample36',501)"],"metadata":{"id":"QB2OhRy6bth3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["500ns イオン無しの結果はBPTI5_mcs.csv"],"metadata":{"id":"6VnNQqlbscAb"}},{"cell_type":"code","source":["#main(100,'minus7',501)\n","#main(100,'minus8',501)\n","#main(100,'plus7',501)"],"metadata":{"id":"f9F-D4HZsnZN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["これをresidue numberに変換して、heatmapを作成する。\\\n","現在コンタクトマップの作成に着手、完成後凝集を評価するグラフを作成\n","\n"],"metadata":{"id":"2G7ox5asv9VE"}},{"cell_type":"code","source":["#ref_pdb = PandasPdb().read_pdb(data_path + 'minus' + '.pdb')\n","#ref_pdb.df['ATOM']['residue_number'].max() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Fb9X9UbfH-K","executionInfo":{"status":"ok","timestamp":1669867077304,"user_tz":-540,"elapsed":319,"user":{"displayName":"Ryusei NOMURA","userId":"04322291516204942259"}},"outputId":"d9333098-ae22-4069-e241-1822b3607341"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["56"]},"metadata":{},"execution_count":14}]}]}